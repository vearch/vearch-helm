{{- if .Values.component.router }}
{{- $envAll := . }}
{{- $namespace := .Values.namespace }}
{{- $router := printf "router-%s" .Release.Name }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: router-{{ .Release.Name }}
  labels:
{{ tuple $envAll $namespace $router | include "helm-toolkit.metadata_labels" | indent 4 }}
  namespace: {{ $namespace }}
spec:
  replicas: {{ .Values.router.replicas }}
  selector:
    matchLabels:
{{ tuple $envAll $namespace $router | include "helm-toolkit.metadata_labels" | indent 6 }}
  template:
    metadata:
      labels:
{{ tuple $envAll $namespace $router | include "helm-toolkit.metadata_labels" | indent 8 }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pull_secret }}
      initContainers:
        - name: init-config
          image: {{ .Values.image.server }}
          imagePullPolicy: {{ .Values.image.pull_policy }}
          command: [ "/bin/sh", "-c", "yum install -y bind-utils; until nslookup master-{{ .Release.Name }}-0.master-service-{{ .Release.Name }}; do echo waiting for master; sleep 2; done;"]
      {{- if .Values.component.monitor }}
      initContainers:
        - name: init-consul
          image: {{ .Values.image.server }}
          imagePullPolicy: {{ .Values.image.pull_policy }}
          command: [ "/bin/sh", "-c", "yum install -y bind-utils; until nslookup consul-service-{{ .Release.Name }}; do echo waiting for consul; sleep 2; done;"]
      {{- end }}
      containers:
        - name: router-pod
          image: {{ .Values.image.server }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: [ "/bin/sh", "-c", "curl -X PUT -d \"{\\\"ID\\\": \\\"router-$PODIP\\\", \\\"Name\\\": \\\"router-$PODIP\\\", \\\"Address\\\": \\\"$PODIP\\\", \\\"Port\\\": 8818}\" consul-service-{{ .Release.Name }}:8500/v1/agent/service/register;sh /vearch/script/start-router.sh" ]
          securityContext:
            privileged: true
          ports: 
{{ tuple $envAll "port" .Values.router.port | include "helm-toolkit.utils.container_port" | indent 12 }}
{{ tuple $envAll "pprof-port" .Values.router.pprof_port | include "helm-toolkit.utils.container_port" | indent 12 }}
{{ tuple $envAll "mport" .Values.router.monitor_port | include "helm-toolkit.utils.container_port" | indent 12 }}
{{ tuple $envAll | include "helm-toolkit.utils.env" | indent 10 }}
          volumeMounts:
            - name: vearch-bin-{{ .Release.Name }}
              mountPath: /vearch/script
              readOnly: true
            {{- if .Values.global.log }}
            - name: pod-log-path
              mountPath: {{ .Values.global.log }}
              readOnly: false
            {{- end }}
            {{- if .Values.global.data }}
            - name: pod-data-path
              mountPath: {{ .Values.global.data }}
              readOnly: false
            {{- end }}
            - name: date-config
              mountPath: /etc/localtime
              readOnly: true
{{ tuple $envAll $envAll.Values.router.resources | include "helm-toolkit.snippets.kubernetes_resources" | indent 10 }}
      volumes:
        - name: vearch-bin-{{ .Release.Name }}
          configMap:
            name: vearch-bin-{{ .Release.Name }}
            defaultMode: 0555
        {{- if .Values.global.log }}
        - name: pod-log-path
          emptyDir: {}
        {{- end }}
        {{- if .Values.global.data }}
        - name: pod-data-path
          emptyDir: {}
        {{- end }}
        - name: date-config
          hostPath:
            path: /etc/localtime
{{ end }}
